(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{522:function(_,a,t){"use strict";t.r(a);var v=t(20),r=Object(v.a)({},(function(){var _=this,a=_.$createElement,t=_._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"关系型数据库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关系型数据库"}},[_._v("#")]),_._v(" 关系型数据库")]),_._v(" "),t("h2",{attrs:{id:"_1、理论"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、理论"}},[_._v("#")]),_._v(" 1、理论")]),_._v(" "),t("h3",{attrs:{id:"_1-1-数据库设计三大范式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-数据库设计三大范式"}},[_._v("#")]),_._v(" 1.1 数据库设计三大范式")]),_._v(" "),t("h4",{attrs:{id:"_1-1-1-第一范式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-1-第一范式"}},[_._v("#")]),_._v(" 1.1.1 第一范式")]),_._v(" "),t("p",[_._v("1、每一列属性都是不可再分的属性值，确保每一列的原子性 （如：地址字段包含了省市区，不符合原子性，应才开）")]),_._v(" "),t("p",[_._v("2、两列的属性相近或相似或一样，尽量合并属性一样的列，确保不产生冗余数据。（如：字段中有室号、物品1、数量1、物品2、数量2，应合并成室号、物品、数量）")]),_._v(" "),t("h4",{attrs:{id:"_1-1-2-第二范式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-2-第二范式"}},[_._v("#")]),_._v(" 1.1.2 第二范式")]),_._v(" "),t("p",[_._v("每一行的数据只能与其中一列相关，即一行数据只做一件事。只要数据列中出现数据重复，就要把表拆分开来。")]),_._v(" "),t("p",[_._v("如：一个人同时订几个房间，就会出来一个订单号多条数据，这样子联系人都是重复的，就会造成数据冗余。我们应该把他拆开来。")]),_._v(" "),t("h4",{attrs:{id:"_1-1-3-第三范式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-3-第三范式"}},[_._v("#")]),_._v(" 1.1.3 第三范式")]),_._v(" "),t("p",[_._v("数据不能存在传递关系，即每个属性都跟主键有直接关系而不是间接关系。像：a--\x3eb--\x3ec 属性之间含有这样的关系，是不符合第三范式的。")]),_._v(" "),t("p",[_._v("如：学号--\x3e 所在院校 --\x3e (院校地址，院校电话) 应拆开为（学号，姓名，年龄，性别，所在院校）--（所在院校，院校地址，院校电话）")]),_._v(" "),t("h2",{attrs:{id:"_2、执行计划explain"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、执行计划explain"}},[_._v("#")]),_._v(" 2、执行计划explain")]),_._v(" "),t("p",[t("img",{attrs:{src:"/img/media/1b8e67882aeee58008cdfbb6937fb3fc.png",alt:"page2image37506720"}})]),_._v(" "),t("h4",{attrs:{id:"_2-1-type列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-type列"}},[_._v("#")]),_._v(" 2.1 type列")]),_._v(" "),t("p",[_._v("表示关联类型或访问类型，即MySQL决定如何查找表中的行")]),_._v(" "),t("p",[t("strong",[_._v("依次从最优到最差分别为 : system > const > eq_ref > ref > range > index > ALL")])]),_._v(" "),t("p",[_._v("一般来说，得保证查询达到range级别，最好达到ref")]),_._v(" "),t("p",[_._v("system：表中只有一条数据，这个类型是特殊的const类型")]),_._v(" "),t("p",[_._v("const：针对主键或唯一索引的等值查询扫描，最多只返回一行数据，const查询速度非常快，因为它仅仅读取一次即可。")]),_._v(" "),t("p",[_._v("eq_ref：此类型通常出现在多表的join查询，表示对于前表的每个结果，都只匹配到后表的一行结果，并且查询的比较操作通常是=，查询效率高。这可能是在 const 之外最好的联接类型了，简单的 select 查询不会出现这种 type。什么情况下结果集只有一个呢！那便是使用了主键或者唯一性索引进行查找的情况")]),_._v(" "),t("p",[_._v("ref：相比 eq_ref，不使用唯一索引，而是使用普通索引或者唯一性索引的部分前缀，索引要和某个值相比较，可能会找到多个符合条件的行。")]),_._v(" "),t("p",[_._v("range：范围扫描通常出现在 in(), between ,> ,<, >= 等操作中。使用一个索引来检索给定范围的行。")]),_._v(" "),t("p",[_._v("index：表示全索引扫描（full index scan），和ALL类型类似，只不过ALL类型是全表扫描，而index类型则仅仅扫描所有的索引，而不扫描数据。通常比ALL快一些。")]),_._v(" "),t("p",[_._v("all：表示全表扫描，这个类型的查询是性能最差的查询之一，通常来说，我们的查询不应该出现ALL类型的查询，因为这样的查询在数据量大的情况下，对数据库的性能是巨大的灾难，一般可以用索引来避免")]),_._v(" "),t("h4",{attrs:{id:"_2-2-possible-keys列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-possible-keys列"}},[_._v("#")]),_._v(" 2.2 possible_keys列")]),_._v(" "),t("p",[_._v("possible_keys表示mysql在查询时，能够使用到的索引，注意，即使有些索引在possible_keys中出现，但是不表示此索引会真正被Mysql使用到，Mysql在查询时具体使用了哪些索引，由key字段决定。")]),_._v(" "),t("h4",{attrs:{id:"_2-3-key列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-key列"}},[_._v("#")]),_._v(" 2.3 key列")]),_._v(" "),t("p",[_._v("此字段是mysql在当前查询时所真正使用到的索引。")]),_._v(" "),t("h4",{attrs:{id:"_2-4-key-len列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-key-len列"}},[_._v("#")]),_._v(" 2.4 key_len列")]),_._v(" "),t("p",[_._v("表示查询优化器使用了索引的字节数，这个字段可以评估组合索引是否完全被使用，或只有最左部分字段被使用到。根据数据类型所占字节数计算出来。")]),_._v(" "),t("h4",{attrs:{id:"_2-5-rows列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-rows列"}},[_._v("#")]),_._v(" 2.5 rows列")]),_._v(" "),t("p",[_._v("rows也是一个重要的字段，mysql查询优化器根据统计信息，估算SQL要查找到结果集需要扫描读取的数据行数。这个值非常直观显示SQL的效率好坏，原则上rows越少越好。")]),_._v(" "),t("h2",{attrs:{id:"_3、索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、索引"}},[_._v("#")]),_._v(" 3、索引")]),_._v(" "),t("h3",{attrs:{id:"_3-1-使用索引注意事项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-使用索引注意事项"}},[_._v("#")]),_._v(" 3.1 使用索引注意事项")]),_._v(" "),t("p",[_._v("1.在经常需要搜索的列上创建索引，加快搜索速度。")]),_._v(" "),t("p",[_._v("2.在where子句中的列上面创建索引，加快条件判断速度。")]),_._v(" "),t("p",[_._v("3.在经常需要排序的列上创建索引，加快排序查询时间。")]),_._v(" "),t("p",[_._v("4.在经常用在连接的列上（主要是一些外键）创建索引，加快连接速度。")]),_._v(" "),t("p",[_._v("5.中到大型表索引都是非常有效的，但是特大型表的话维护开销会很大，不适合建索引。")]),_._v(" "),t("p",[_._v("6.避免where子句中对字段施加函数，这会造成无法命中索引。")]),_._v(" "),t("p",[_._v("7.使用innoDB时用与业务无关的自增主键，即使用逻辑主键而不要用业务主键。")]),_._v(" "),t("p",[_._v("8.打算加索引的列设置为not null，否则将导致引擎放弃使用索引而进行全表扫描。")]),_._v(" "),t("p",[_._v("9.删除长期未使用的索引，不用的索引的存在会造成不必要的性能损耗。")]),_._v(" "),t("h3",{attrs:{id:"_3-2-调优"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-调优"}},[_._v("#")]),_._v(" 3.2 调优")]),_._v(" "),t("p",[t("strong",[_._v("1.分库分表，读写分离"),t("br"),_._v("\n2.拆sql"),t("br"),_._v("\n3.建索引"),t("br"),_._v("\n4.sql优化")]),t("br"),_._v("\n1）like，尽量不在关键词前加%"),t("br"),_._v("\n2）尽量多表连接查询，避免子查询"),t("br"),_._v("\n3）合理的增加冗余的字段"),t("br"),_._v("\n4）减少使用IN或者NOT IN ,使用exists，not exists或者关联查询语句替代")]),_._v(" "),t("p",[_._v("mysql中的in语句是把外表和内表作hash 连接，而exists语句是对外表作loop循环，每次loop循环再对内表进行查询。")]),_._v(" "),t("p",[_._v("一直以来大家都认为exists比in语句的效率要高，这种说法其实是不准确的。这个是要区分环境的：")]),_._v(" "),t("p",[_._v("如果查询的两个表大小相当，那么用in和exists差别不大。")]),_._v(" "),t("p",[_._v("如果两个表中一个较小，一个是大表，则子查询表大的用exists，子查询表小的用in。"),t("br"),_._v("\n5）or 的查询尽量用 union或者union all 代替（虽然这两个方式都用到了索引，但 UNION 是用一个明确的值到索引中查找，目标非常明确，OR 需要对比两个值，目标相对要模糊一些，所以 OR 在恍惚中落后了）")]),_._v(" "),t("p",[t("strong",[_._v("当MySQL单表记录数过大时，数据库的CRUD性能会明显下 降，一些常见的优化措施如下:")])]),_._v(" "),t("p",[t("strong",[_._v("1. 限定数据的范围:")]),_._v(" 务必禁止不带任何限制数据范围条件的查询语句。比如:我们当用户在查询订单历史的时 候，我们可以控制在一个月的范围内。;")]),_._v(" "),t("p",[t("strong",[_._v("2. 读/写分离:")]),_._v(" 经典的数据库拆分方案，主库负责写，从库负责读;")]),_._v(" "),t("p",[t("strong",[_._v("3. 垂直分区:")]),_._v(" 根据数据库里面数据表的相关性进行拆分。 把一张列比较多的表拆分为多张表。 如下图所示，这样来说大家应该就更容易理解了。")]),_._v(" "),t("p",[t("img",{attrs:{src:"/img/media/ae0777cc89c548370b9ea85d6450481a.png",alt:""}})]),_._v(" "),t("p",[t("strong",[_._v("4. 水平分区:")]),_._v(" 水平拆分是指数据表行的拆分，表的行数超过200万行时，就会变慢，这时可以把一张的表的数据拆成多张表来存放。")]),_._v(" "),t("p",[t("img",{attrs:{src:"/img/media/9ea9f3663fefd9c82a3c18951d11018f.png",alt:""}})]),_._v(" "),t("h3",{attrs:{id:"_3-3-innodb和myisam"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-innodb和myisam"}},[_._v("#")]),_._v(" 3.3 InnoDB和MyISam")]),_._v(" "),t("h4",{attrs:{id:"_3-3-1-innodb和myisam的数据结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-1-innodb和myisam的数据结构"}},[_._v("#")]),_._v(" 3.3.1 InnoDB和MyISam的数据结构？")]),_._v(" "),t("p",[_._v("InnoDB和MyIsam是B+树索引")]),_._v(" "),t("p",[_._v("要加快索引 的查找速度则需要降低树的高度，要降低树的高度可通过增加树节点中数据的个数（度）实现。因为节点的数据是从磁盘加载的，磁盘加载数据的速度相对内存来说是很慢的，所以节点中数据不是越多越好，因为太多的话可能要多次 IO才能加载完，这样效率就会变低，所以B+树节点存储的数据大小尽量保证与一次IO读取数据大小一致，由于一次IO读取的数据较大（16K?）,所以树的高度不高，即查找的次数很少就能找到目标数据。"),t("br"),_._v("\n1）MyISam非聚集索引 B+树结构 数据与索引分开存储，指向数据的地址存储在节点中"),t("br"),_._v("\n2）InnoDB聚集索引 B+树结构 数据与索引存储在一起，数据存储在叶子节点")]),_._v(" "),t("h4",{attrs:{id:"_3-3-2-mysql推荐用自增主键原因"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-2-mysql推荐用自增主键原因"}},[_._v("#")]),_._v(" 3.3.2 mysql推荐用自增主键原因？")]),_._v(" "),t("p",[_._v("1）占用空间小，一次IO加载的数据多。"),t("br"),_._v("\n2）数字比较比字符串比较消耗小。"),t("br"),_._v("\n3）新增数据时自增主键都是顺序插入到B+树结构，而uuid之类的字符串主键计算后可能是插入到B+树中间的节点，这样会导致更多的计算消耗。")]),_._v(" "),t("h4",{attrs:{id:"_3-3-3-什么是覆盖索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-3-什么是覆盖索引"}},[_._v("#")]),_._v(" 3.3.3 什么是覆盖索引？")]),_._v(" "),t("p",[_._v("如果一个索引包含（或者说覆盖）所有需要查询的字段的值，我们就称之为“覆盖索引”。InnoDB引擎中，如果不是主键索引，叶子节点存储的是主键+列值，最终还是要“回表”，也就是通过主键再查找一次。这样比较慢。覆盖索引就是要查询出的列和索引是对应的，不做回表操作。")]),_._v(" "),t("p",[_._v("例子：")]),_._v(" "),t("p",[_._v("ALTER TABLE `test_table` ADD INDEX `idx_col1_col2_col3`(`col1`，`col2`，`col3`)")]),_._v(" "),t("p",[_._v("分析查询：")]),_._v(" "),t("p",[_._v("EXPLAIN SELECT SQL_NO_CACHE col2, col3 FROM test_table WHERE col1 = xxx ORDER BY col2;")]),_._v(" "),t("p",[_._v("结果：建立联合索引后，type 为 ref，使用了 idx_col1_col2_col3 索引，Extra 为 Using index，说明使用了覆盖索引。")]),_._v(" "),t("h4",{attrs:{id:"_3-3-4-怎么添加索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-4-怎么添加索引"}},[_._v("#")]),_._v(" 3.3.4 怎么添加索引？")]),_._v(" "),t("p",[t("strong",[_._v("1.添加PRIMARY KEY(主键索引)")])]),_._v(" "),t("p",[_._v("ALTER TABLE `table_name` ADD PRIMARY KEY ( `column` )")]),_._v(" "),t("p",[t("strong",[_._v("2.添加UNIQUE(唯一索引)")])]),_._v(" "),t("p",[_._v("ALTER TABLE `table_name` ADD UNIQUE ( `column` )")]),_._v(" "),t("p",[t("strong",[_._v("3.添加INDEX(普通索引)")])]),_._v(" "),t("p",[_._v("ALTER TABLE `table_name` ADD INDEX index_name ( `column` )")]),_._v(" "),t("p",[t("strong",[_._v("4.添加多列索引")])]),_._v(" "),t("p",[_._v("ALTER TABLE `table_name` ADD INDEX index_name ( `column1`, `column2`, `column3` )")]),_._v(" "),t("h2",{attrs:{id:"_4、事务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、事务"}},[_._v("#")]),_._v(" 4、事务")]),_._v(" "),t("h3",{attrs:{id:"_4-1-什么是事务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-什么是事务"}},[_._v("#")]),_._v(" 4.1 什么是事务？")]),_._v(" "),t("p",[_._v("事务逻辑上的一组操作，组成这组操作的各个逻辑单元,要么一起成功,要么一起失败。")]),_._v(" "),t("h3",{attrs:{id:"_4-2-事务有哪些特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-事务有哪些特性"}},[_._v("#")]),_._v(" 4.2 事务有哪些特性？")]),_._v(" "),t("p",[t("strong",[_._v("事务的特性（ACID）")])]),_._v(" "),t("p",[t("strong",[_._v("原子性（atomicity）:")]),_._v(" 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用;")]),_._v(" "),t("p",[t("strong",[_._v("一致性（consistency）:")]),_._v(" 执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的;")]),_._v(" "),t("p",[t("strong",[_._v("隔离性（isolation）:")]),_._v(" 并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的;")]),_._v(" "),t("p",[t("strong",[_._v("持久性（durability）:")]),_._v(" 事务一旦结束，数据就持久到数据库。")]),_._v(" "),t("h3",{attrs:{id:"_4-3-innodb怎么实现事务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-innodb怎么实现事务"}},[_._v("#")]),_._v(" 4.3 innodb怎么实现事务")]),_._v(" "),t("p",[_._v("ACD三个特性是通过Redo log（重做日志）和Undo log实现的。 而隔离性是通过锁来实现的。")]),_._v(" "),t("h3",{attrs:{id:"_4-4-并发事务带来的问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-并发事务带来的问题"}},[_._v("#")]),_._v(" 4.4 并发事务带来的问题")]),_._v(" "),t("h4",{attrs:{id:"_4-4-1-脏读-dirty-read"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-1-脏读-dirty-read"}},[_._v("#")]),_._v(" 4.4.1 脏读（Dirty read）")]),_._v(" "),t("p",[_._v("脏读发生在一个事务读取了被另一个事务改写但尚未提交的数据时。如果这些改变在稍后被回滚了，那么第一个事务读取的数据就会是无效的。")]),_._v(" "),t("h4",{attrs:{id:"_4-4-2-不可重复读-nonrepeatable-read"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-2-不可重复读-nonrepeatable-read"}},[_._v("#")]),_._v(" 4.4.2 不可重复读（Nonrepeatable read）")]),_._v(" "),t("p",[_._v("不可重复读发生在一个事务执行相同的查询两次或两次以上，但每次查询结果都不相同时。这通常是由于另一个并发事务在两次查询之间更新了数据。")]),_._v(" "),t("h4",{attrs:{id:"_4-4-3-幻影读-phantom-reads"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-3-幻影读-phantom-reads"}},[_._v("#")]),_._v(" 4.4.3 幻影读（Phantom reads）")]),_._v(" "),t("p",[_._v("幻影读和不可重复读相似。当一个事务（T1）读取几行记录后，另一个并发事务（T2）插入了一些记录时，幻影读就发生了。在后来的查询中，第一个事务（T1）就会发现一些原来没有的额外记录。")]),_._v(" "),t("h4",{attrs:{id:"_4-4-4-不可重复度和幻读区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-4-不可重复度和幻读区别"}},[_._v("#")]),_._v(" 4.4.4 不可重复度和幻读区别")]),_._v(" "),t("p",[_._v("不可重复读的重点是修改，幻读的重点在于新增或者删除。")]),_._v(" "),t("h3",{attrs:{id:"_4-5-事务隔离级别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-事务隔离级别"}},[_._v("#")]),_._v(" 4.5 事务隔离级别")]),_._v(" "),t("h4",{attrs:{id:"_4-5-1-read-uncommitted-读取未提交"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-1-read-uncommitted-读取未提交"}},[_._v("#")]),_._v(" 4.5.1 READ-UNCOMMITTED(读取未提交)")]),_._v(" "),t("p",[_._v("最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读")]),_._v(" "),t("h4",{attrs:{id:"_4-5-2-read-committed-读取已提交"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-2-read-committed-读取已提交"}},[_._v("#")]),_._v(" 4.5.2 READ-COMMITTED(读取已提交)")]),_._v(" "),t("p",[_._v("允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生")]),_._v(" "),t("h4",{attrs:{id:"_4-5-3-repeatable-read-可重复读"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-3-repeatable-read-可重复读"}},[_._v("#")]),_._v(" 4.5.3 REPEATABLE-READ(可重复读)")]),_._v(" "),t("p",[_._v("对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。")]),_._v(" "),t("h4",{attrs:{id:"_4-5-4-serializable-串行化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-4-serializable-串行化"}},[_._v("#")]),_._v(" 4.5.4 SERIALIZABLE(串行化)")]),_._v(" "),t("p",[_._v("最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。")]),_._v(" "),t("h4",{attrs:{id:"_4-5-5-数据库默认隔离级别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-5-数据库默认隔离级别"}},[_._v("#")]),_._v(" 4.5.5 数据库默认隔离级别")]),_._v(" "),t("p",[_._v("MySQL InnoDB 存储引擎的默认支持的隔离级别是：REPEATABLE-READ（可重读）")]),_._v(" "),t("p",[_._v("Oracle 默认：READ-COMMITTED（读已提交）")]),_._v(" "),t("p",[t("img",{attrs:{src:"/img/media/a94967fbc3b08e972fee8687d3a96146.png",alt:""}})]),_._v(" "),t("h3",{attrs:{id:"_4-6-spring-事务中的隔离级别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-6-spring-事务中的隔离级别"}},[_._v("#")]),_._v(" 4.6 Spring 事务中的隔离级别")]),_._v(" "),t("p",[t("strong",[_._v("TransactionDefinition 接口中定义了五个表示隔离级别的常量:")])]),_._v(" "),t("p",[_._v("TransactionDefinition.ISOLATION_DEFAULT")]),_._v(" "),t("p",[_._v("TransactionDefinition.ISOLATION_READ_UNCOMMITTED")]),_._v(" "),t("p",[_._v("TransactionDefinition.ISOLATION_READ_COMMITTED")]),_._v(" "),t("p",[_._v("TransactionDefinition.ISOLATION_REPEATABLE_READ")]),_._v(" "),t("p",[_._v("TransactionDefinition.ISOLATION_SERIALIZABLE")]),_._v(" "),t("h4",{attrs:{id:"_4-6-1-isolation-default"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-6-1-isolation-default"}},[_._v("#")]),_._v(" 4.6.1 ISOLATION_DEFAULT")]),_._v(" "),t("p",[_._v("使用后端数据库默认的隔离级别。")]),_._v(" "),t("p",[_._v("Mysql 默认采用的 REPEATABLE_READ隔离级别。Oracle 默认采用的 READ_COMMITTED隔离级别。")]),_._v(" "),t("h4",{attrs:{id:"_4-6-2-isolation-read-uncommitted"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-6-2-isolation-read-uncommitted"}},[_._v("#")]),_._v(" 4.6.2 ISOLATION_READ_UNCOMMITTED")]),_._v(" "),t("p",[_._v("最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。")]),_._v(" "),t("h4",{attrs:{id:"_4-6-3-isolation-read-committed"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-6-3-isolation-read-committed"}},[_._v("#")]),_._v(" 4.6.3 ISOLATION_READ_COMMITTED")]),_._v(" "),t("p",[_._v("允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。")]),_._v(" "),t("h4",{attrs:{id:"_4-6-4-isolation-repeatable-read"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-6-4-isolation-repeatable-read"}},[_._v("#")]),_._v(" 4.6.4 ISOLATION_REPEATABLE_READ")]),_._v(" "),t("p",[_._v("对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。")]),_._v(" "),t("h4",{attrs:{id:"_4-6-5-isolation-serializable"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-6-5-isolation-serializable"}},[_._v("#")]),_._v(" 4.6.5 ISOLATION_SERIALIZABLE")]),_._v(" "),t("p",[_._v("最高的隔离级别，完全服从ACID的隔离级别。")]),_._v(" "),t("p",[_._v("所有事务依次逐个执行，事务之间不产生干扰，也就是说该级别可以防止脏读、不可重复读以及幻读。")]),_._v(" "),t("p",[_._v("但是这将严重影响程序的性能。通常情况下也不会用到该级别。")]),_._v(" "),t("h3",{attrs:{id:"_4-7-spring事务的7种传播行为"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-7-spring事务的7种传播行为"}},[_._v("#")]),_._v(" 4.7 Spring事务的7种传播行为")]),_._v(" "),t("h4",{attrs:{id:"_4-7-1-保证同一个事务中"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-7-1-保证同一个事务中"}},[_._v("#")]),_._v(" 4.7.1 保证同一个事务中")]),_._v(" "),t("h5",{attrs:{id:"_1-propagation-required"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-propagation-required"}},[_._v("#")]),_._v(" 1 PROPAGATION_REQUIRED")]),_._v(" "),t("p",[t("strong",[_._v("如果存在一个事务则支持当前事务，如果不存在就新建一个(默认)")])]),_._v(" "),t("p",[t("img",{attrs:{src:"/img/media/5ebd355004cffff75d16dcbbad70ff50.png",alt:""}})]),_._v(" "),t("h5",{attrs:{id:"_2-propagation-supports"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-propagation-supports"}},[_._v("#")]),_._v(" 2 PROPAGATION_SUPPORTS")]),_._v(" "),t("p",[t("strong",[_._v("如果存在一个事务则支持当前事务，如果不存在，就不使用事务")])]),_._v(" "),t("p",[t("strong",[t("img",{attrs:{src:"/img/media/8739e831fd7c045572d57af1727a58a9.png",alt:""}})])]),_._v(" "),t("h5",{attrs:{id:"_3-propagation-mandatory"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-propagation-mandatory"}},[_._v("#")]),_._v(" 3 PROPAGATION_MANDATORY")]),_._v(" "),t("p",[t("strong",[_._v("如果存在一个事务则支持当前事务，如果不存在，抛出异常")])]),_._v(" "),t("p",[t("strong",[t("img",{attrs:{src:"/img/media/e8b9cf464c845d1e6789e1d9fa7990f8.png",alt:""}})])]),_._v(" "),t("h4",{attrs:{id:"_4-7-1-保证没有在同一个事务中"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-7-1-保证没有在同一个事务中"}},[_._v("#")]),_._v(" 4.7.1 保证没有在同一个事务中")]),_._v(" "),t("h5",{attrs:{id:"_4-propagation-requires-new"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-propagation-requires-new"}},[_._v("#")]),_._v(" 4.PROPAGATION_REQUIRES_NEW")]),_._v(" "),t("p",[t("strong",[_._v("如果有事务存在，挂起当前事务，创建一个新的事务")])]),_._v(" "),t("p",[t("strong",[t("img",{attrs:{src:"/img/media/62b28f87dbe5152367d921c6389a53c9.png",alt:""}})])]),_._v(" "),t("h5",{attrs:{id:"_5-propagation-not-supported"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-propagation-not-supported"}},[_._v("#")]),_._v(" 5.PROPAGATION_NOT_SUPPORTED")]),_._v(" "),t("p",[t("strong",[_._v("以非事务方式运行，如果有事务存在，挂起当前事务")])]),_._v(" "),t("p",[t("strong",[t("img",{attrs:{src:"/img/media/0eb5d553d14fb2587cb1d76b6d5f99a9.png",alt:""}})])]),_._v(" "),t("h5",{attrs:{id:"_6-propagation-never"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-propagation-never"}},[_._v("#")]),_._v(" 6.PROPAGATION_NEVER")]),_._v(" "),t("p",[t("strong",[_._v("以非事务方式运行，如果有事务存在，抛出异常")])]),_._v(" "),t("h5",{attrs:{id:"_7-propagation-nested"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-propagation-nested"}},[_._v("#")]),_._v(" 7.PROPAGATION_NESTED")]),_._v(" "),t("p",[t("strong",[_._v("如果当前事务存在，则嵌套事务执行")])]),_._v(" "),t("p",[t("img",{attrs:{src:"/img/media/5beb9270fd8429f96118093e23a9f289.png",alt:""}})]),_._v(" "),t("h4",{attrs:{id:"_4-7-2-传播级别不生效原因"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-7-2-传播级别不生效原因"}},[_._v("#")]),_._v(" 4.7.2 传播级别不生效原因？")]),_._v(" "),t("p",[t("img",{attrs:{src:"/img/media/5825e61f42435a62cbc1282493e92da0.png",alt:""}})]),_._v(" "),t("p",[_._v("必须用注入的实例（代理类实例，有代理事务逻辑处理），否则只是普通类实例会导致事务代码不生效。")]),_._v(" "),t("p",[_._v("可以类自己注入自己实例。")]),_._v(" "),t("h2",{attrs:{id:"_5、锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5、锁"}},[_._v("#")]),_._v(" 5、锁")]),_._v(" "),t("h3",{attrs:{id:"_5-1-事务一定会锁表吗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-事务一定会锁表吗"}},[_._v("#")]),_._v(" 5.1 事务一定会锁表吗?")]),_._v(" "),t("p",[_._v("1、事务隔离级别是"),t("strong",[_._v("可重复读")]),_._v("时，"),t("strong",[_._v("如果没有索引")]),_._v("，更新数据时会锁住整张表。")]),_._v(" "),t("p",[_._v("2、事务隔离级别为"),t("strong",[_._v("读未提交")]),_._v("时，写数据只会"),t("strong",[_._v("锁住相应的行")]),_._v("。")]),_._v(" "),t("p",[_._v("3、事务隔离级别为串行化时，读写数据都会锁住整张表。")]),_._v(" "),t("p",[t("strong",[_._v("InnoDB的行锁是针对索引加的锁，不是针对记录加的锁。并且该索引不能失效，否则都会从行锁升级为表锁。")])]),_._v(" "),t("h3",{attrs:{id:"_5-2-锁分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-锁分类"}},[_._v("#")]),_._v(" 5.2 锁分类")]),_._v(" "),t("p",[_._v("1.从性能上分为"),t("strong",[_._v("乐观锁")]),_._v("(用版本对比来实现)和"),t("strong",[_._v("悲观锁")])]),_._v(" "),t("p",[_._v("2.从对数据操作的粒度分，分为"),t("strong",[_._v("表锁")]),_._v("和"),t("strong",[_._v("行锁")])]),_._v(" "),t("p",[_._v("3.从对数据库操作的类型分，分为"),t("strong",[_._v("读锁")]),_._v("和"),t("strong",[_._v("写锁")]),_._v("(都属于悲观锁)")]),_._v(" "),t("p",[_._v("读锁(共享锁，S锁(Shared)):针对同一份数据，多个读操作可以同时进行而不会互相影响")]),_._v(" "),t("p",[_._v("写锁(排它锁，X锁(eXclusive)):当前写操作没有完成前，它会阻断其他写锁和读锁")]),_._v(" "),t("p",[t("strong",[_._v("读锁和写锁都是行级锁，InnoDB的行锁是通过给索引上的索引项加锁来实现的")]),_._v("，如果没有索引，InnoDB将通过隐藏的聚簇索引来对记录加锁，InnoDB行锁分为3中情形：")]),_._v(" "),t("p",[_._v("1. "),t("strong",[_._v("Record Lock")]),_._v("：对索引项加锁。")]),_._v(" "),t("p",[_._v("2. "),t("strong",[_._v("Gap Lock（间隙锁）")]),_._v("：对索引项之间的“间隙”、第一条记录前的“间隙”或最后一条记录后的“间隙”加锁。")]),_._v(" "),t("p",[_._v("3. "),t("strong",[_._v("Next-key Lock（临键锁）")]),_._v("：前两种的结合，对记录及其前面的间隙加锁。")]),_._v(" "),t("p",[_._v("InnoDB这种行锁的实现特点意味着，如果不通过索引条件检索数据，那么InnoDB将对表中的所有记录加锁，实际效果跟锁表一样。")]),_._v(" "),t("h3",{attrs:{id:"_5-3-锁优化建议"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-锁优化建议"}},[_._v("#")]),_._v(" 5.3 锁优化建议")]),_._v(" "),t("p",[_._v("1.尽可能让所有数据检索都通过索引来完成，避免无索引行锁升级为表锁")]),_._v(" "),t("p",[_._v("2.合理设计索引，尽量缩小锁的范围")]),_._v(" "),t("p",[_._v("3.尽可能减少检索条件范围，避免间隙锁")]),_._v(" "),t("p",[_._v("4.尽量控制事务大小，减少锁定资源量和时间长度，涉及事务加锁的sql尽量放在事务最后执行")]),_._v(" "),t("p",[_._v("5.尽可能低级别事务隔离")]),_._v(" "),t("h3",{attrs:{id:"_5-4-mvcc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-mvcc"}},[_._v("#")]),_._v(" 5.4 MVCC")]),_._v(" "),t("p",[_._v("所谓的MVCC（Multi-Version Concurrency Control ，多版本并发控制）指的就是在使用"),t("strong",[_._v("READ COMMITTD、REPEATABLE READ")]),_._v("这两种隔离级别的事务在执行普通的SEELCT操作时访问记录的版本链的过程，这样子可以使不同事务的读-写、写-读操作并发执行，从而提升系统性能。")]),_._v(" "),t("p",[t("strong",[_._v("READ COMMITTD、REPEATABLE READ")]),_._v("这两个隔离级别的一个很大不同就是生成"),t("strong",[_._v("ReadView")]),_._v("的时机不同，")]),_._v(" "),t("p",[t("strong",[_._v("READ COMMITTD")]),_._v("在每一次进行普通SELECT操作前都会生成一个"),t("strong",[_._v("ReadView")]),_._v("，")]),_._v(" "),t("p",[_._v("而"),t("strong",[_._v("REPEATABLE READ")]),_._v("只在第一次进行普通SELECT操作前生成一个"),t("strong",[_._v("ReadView")]),_._v("，之后的查询操作都重复这个"),t("strong",[_._v("ReadView")]),_._v("就好了。")]),_._v(" "),t("p",[_._v("MVCC，对一行数据的读和写两个操作默认是不会通过加锁互斥来保证隔离性，避免了频繁加锁互斥，而在串行化隔离级别为了保证较高的隔离性是通过将所有操作加锁互斥来实现的。Mysql在读已提交和可重复读隔离级别下都实现了MVCC机制。")]),_._v(" "),t("h3",{attrs:{id:"_5-5-undo日志版本链与read-view机制详解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-undo日志版本链与read-view机制详解"}},[_._v("#")]),_._v(" 5.5 undo日志版本链与read view机制详解")]),_._v(" "),t("p",[_._v("undo日志版本链是指一行数据被多个事务依次修改过后，在每个事务修改完后，Mysql会保留修改前的数据undo回滚日志，并且用两个隐藏字段trx_id和roll_pointer把这些undo日志串联起来形成一个历史记录版本链。")]),_._v(" "),t("p",[t("img",{attrs:{src:"/img/media/97343619e73cef85cca25c5882e0afbd.png",alt:""}})]),_._v(" "),t("p",[_._v("在可重复读隔离级别，当事务开启，执行任何查询sql时会生成当前事务的一致性视图read-view，该视图在事务结束之前都不会变化。")]),_._v(" "),t("p",[_._v("如果是读已提交隔离级别在每次执行查询sql时都会重新生成。")]),_._v(" "),t("p",[_._v("read-view视图由执行查询时所有未提交事务id数组(数组里最小的id为min_id)和已创建的最大事务id(max_id)组成，事务里的任何sql查询结果需要从对应版本链里的最新数据开始逐条跟read-view做比对从而得到最终的快照结果。")]),_._v(" "),t("p",[t("strong",[_._v("总结")]),_._v(": MVCC机制的实现就是通过read-view机制与undo版本链比对机制，使得不同的事务会根据数据版本链对比规则读取同一条数据在版本链上的不同版本数据。")]),_._v(" "),t("p",[_._v("注意:begin/start transaction 命令并不是一个事务的起点，在执行到它们之后的第一个修改操作InnoDB表的语句，事务才真正启动，才会向mysql申请事务id，mysql内部是严格按照事务的启动顺序来分配事务id的。")])])}),[],!1,null,null,null);a.default=r.exports}}]);